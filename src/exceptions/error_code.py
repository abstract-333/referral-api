from enum import Enum

from pydantic import BaseModel


class ErrorModel(BaseModel):
    detail: str | dict[str, str]


class ErrorCodeReasonModel(BaseModel):
    code: str
    reason: str


class ErrorCode(str, Enum):
    REGISTER_INVALID_PASSWORD = "REGISTER_INVALID_PASSWORD"
    REGISTER_USER_ALREADY_EXISTS = "REGISTER_USER_ALREADY_EXISTS"
    OAUTH_NOT_AVAILABLE_EMAIL = "OAUTH_NOT_AVAILABLE_EMAIL"
    OAUTH_USER_ALREADY_EXISTS = "OAUTH_USER_ALREADY_EXISTS"
    LOGIN_BAD_CREDENTIALS = "LOGIN_BAD_CREDENTIALS"
    USER_NOT_VERIFIED = "USER_NOT_VERIFIED"
    RESET_PASSWORD_INVALID_PASSWORD = "RESET_PASSWORD_INVALID_PASSWORD"
    RESET_PASSWORD_BAD_TOKEN = "RESET_PASSWORD_BAD_TOKEN"
    VERIFY_USER_BAD_TOKEN = "VERIFY_USER_BAD_TOKEN"
    USER_ALREADY_VERIFIED = "USER_ALREADY_VERIFIED"
    EMAIL_ALREADY_EXISTS = "EMAIL_ALREADY_EXISTS"
    EMAIL_INVALID = "EMAIL_INVALID"
    UPDATE_USER_INVALID_PASSWORD = "UPDATE_USER_INVALID_PASSWORD"
    USER_NOT_EXISTS = "USER_NOT_EXISTS"
    USER_INACTIVE = "USER_INACTIVE"
    USER_NOT_AUTHENTICATED = "USER_NOT_AUTHENTICATED"
    USER_INACTIVE_OR_NOT_EXISTS = "USER_INACTIVE_OR_NOT_EXISTS"
    FORBIDDEN = "FORBIDDEN"
    EXPIRED_TOKEN = "EXPIRED_TOKEN"
    JWT_TOKEN_INVALID = "JWT_TOKEN_INVALID"
    INVALID_REFRESH_TOKEN = "INVALID_REFRESH_TOKEN"
    BLOCKED_REFRESH_TOKEN = "BLOCKED_REFRESH_TOKEN"
    INVALID_CREDENTIALS = "INVALID_CREDENTIALS"
    REFERRAL_CODE_NOT_FOUND = "REFERRAL_CODE_NOT_FOUND"
    REFERRAL_CODE_EXISTS = "REFERRAL_CODE_EXISTS"
    REFERRAL_CODE_INVALID = "REFERRAL_CODE_INVALID"
